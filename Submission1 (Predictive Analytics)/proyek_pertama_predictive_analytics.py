# -*- coding: utf-8 -*-
"""Proyek Pertama : Predictive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d_ImWIszOvf-KyJBVXt0bcnOwIsNJUy5

# Proyek Pertama: [Predictive Analytics]
- **Nama:** [Maylina Nur'aini]
- **Pendekatan Machine Learning:** [Klasifikasi]
- **Domain:** [Pendidikan (Students Performance in Exams)]

## Import Library
"""

import os
import zipfile
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""## Load Dataset"""

# Upload fie json
from google.colab import files
files.upload()

# Unduh dan load dataset
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d spscientist/students-performance-in-exams

import zipfile
with zipfile.ZipFile("students-performance-in-exams.zip", 'r') as zip_ref:
    zip_ref.extractall("students_performance_dataset")

# Load dataset ke dalam DataFrame
data = pd.read_csv("students_performance_dataset/StudentsPerformance.csv")
data.head()

"""**Insight:**
- Dataset "StudentsPerformance.csv" berhasil dimuat ke dalam pandas DataFrame bernama data.
- Beberapa baris pertama DataFrame ditampilkan, menunjukkan kolom-kolom: 'gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course', 'math score', 'reading score', dan 'writing score'. Kolom-kolom ini merepresentasikan berbagai faktor yang berkaitan dengan performa siswa.

## Eksplorasi Data
"""

print(data.info())

print(data.describe())

sns.countplot(x='gender', data=data)
plt.title('Distribution of Gender')
plt.show()

sns.histplot(data['math score'], bins=20, kde=True)
plt.title('Distribution of Math Scores')
plt.show()

"""**Insight:**

- Informasi dataset menunjukkan bahwa terdapat 1000 entri dengan 8 kolom. Semua kolom memiliki tipe data yang sesuai dan tidak ada nilai null yang terdeteksi pada tahap ini.
- Ringkasan statistik deskriptif menunjukkan distribusi nilai untuk kolom numerik ('math score', 'reading score', 'writing score'), termasuk nilai rata-rata, standar deviasi, minimum, maksimum, dan kuartil.
- Visualisasi menunjukkan distribusi gender dalam dataset dan distribusi nilai matematika siswa, memberikan gambaran awal tentang sebaran data pada fitur-fitur tersebut.

## Pra-pemrosesan
"""

# Cek missing value
print(data.isnull().sum())

# Buat label klasifikasi: apakah nilai matematika >= 70 (1 = lulus, 0 = tidak)
data['pass_math'] = np.where(data['math score'] >= 70, 1, 0)

# Encode fitur kategori
le = LabelEncoder()
data['gender'] = le.fit_transform(data['gender'])
data['lunch'] = le.fit_transform(data['lunch'])
data['test preparation course'] = le.fit_transform(data['test preparation course'])
data['race/ethnicity'] = pd.factorize(data['race/ethnicity'])[0]
data['parental level of education'] = pd.factorize(data['parental level of education'])[0]

data.head()

"""**Insight:**

- Tidak ada missing value yang ditemukan dalam dataset.
- Label klasifikasi baru 'pass_math' berhasil dibuat berdasarkan kondisi nilai 'math score' >= 70.
- Fitur kategorikal seperti 'gender', 'lunch', 'test preparation course', 'race/ethnicity', dan 'parental level of education' telah berhasil di-encode menjadi nilai numerik menggunakan *LabelEncoder* dan *pd.factorize*, yang siap untuk digunakan dalam model machine learning.

## Split Data Train & Test
"""

X = data.drop(columns=['math score', 'pass_math'])
y = data['pass_math']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Insight:**

- Data telah berhasil dibagi menjadi fitur (variabel independen) dan label (variabel dependen, yaitu 'pass_math').
- Dataset kemudian dibagi lagi menjadi data latih (untuk melatih model) dan data uji (untuk mengevaluasi model) dengan rasio 80:20, memastikan bahwa model akan diuji pada data yang belum pernah dilihat sebelumnya. Pembagian ini menggunakan random_state=42 untuk memastikan konsistensi hasil pembagian.

## Training Model
"""

# Logistic Regression
lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Random Forest
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

"""**Insight:**

- Dua model klasifikasi telah berhasil dilatih pada data latih (X_train dan y_train): Logistic Regression dan Random Forest.
- Model Logistic Regression menggunakan parameter *max_iter=1000* untuk memastikan konvergensi.
- Model Random Forest menggunakan *random_state=42* untuk reproducibility.
Prediksi telah dibuat pada data uji (X_test) untuk kedua model, yaitu *y_pred_lr dan y_pred_rf*, yang siap dievaluasi.

## Evaluasi Model
"""

print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_lr))
print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))

print("Confusion Matrix Random Forest:")
print(confusion_matrix(y_test, y_pred_rf))

print("Classification Report Random Forest:")
print(classification_report(y_test, y_pred_rf))

"""**Insight:**
- Hasil evaluasi menunjukkan bahwa model Logistic Regression memiliki akurasi 0.9, sedikit lebih tinggi dibandingkan dengan model Random Forest yang memiliki akurasi 0.86.
- Confusion Matrix untuk Random Forest menunjukkan bahwa model ini dengan benar mengklasifikasikan 108 siswa sebagai tidak lulus (True Negatives) dan 64 siswa sebagai lulus (True Positives). Terdapat 14 siswa yang seharusnya tidak lulus namun diprediksi lulus (False Positives) dan 14 siswa yang seharusnya lulus namun diprediksi tidak lulus (False Negatives).
- Classification Report untuk Random Forest memberikan detail lebih lanjut. Untuk kelas 0 (tidak lulus), presisi, recall, dan f1-score adalah 0.89. Untuk kelas 1 (lulus), presisi, recall, dan f1-score adalah 0.82. Ini menunjukkan bahwa model sedikit lebih baik dalam memprediksi siswa yang tidak lulus dibandingkan dengan siswa yang lulus.
"""